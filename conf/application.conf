# CSRF
play.filters.disabled += play.filters.csrf.CSRFFilter

# App Loader
# ~~~~~~~~~~
play.application.loader=di.MainApplicationLoader

# DB Configuration
# ~~~~~~~~~~~~~~~~
db.default.driver=com.mysql.jdbc.Driver
db.default.url="jdbc:mysql://localhost:3306/hackathonStarter?useSSL=false&autoReconnect=true&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;zeroDateTimeBehavior=convertToNull&useTimezone=true&serverTimezone=UTC"
db.default.username=root
db.default.password=root

# Number of database connections
# See https://github.com/brettwooldridge/HikariCP/wiki/About-Pool-Sizing
fixedConnectionPool = 9

play.db {
  prototype {
    hikaricp.minimumIdle = ${fixedConnectionPool}
    hikaricp.maximumPoolSize = ${fixedConnectionPool}
  }
}

# Job queue sized to HikariCP connection pool
database.dispatcher {
  executor = "thread-pool-executor"
  throughput = 1
  thread-pool-executor {
    fixed-pool-size = ${fixedConnectionPool}
  }
}


## Internationalisation
play.i18n {
  # The application languages
  langs = [ "en", "es" ]
}

## Filter Configuration
# https://www.playframework.com/documentation/latest/Filters
# ~~~~~
# There are a number of built-in filters that can be enabled and configured
# to give Play greater security.
#
play.filters {

  # Enabled filters are run automatically against Play.
  # CSRFFilter, AllowedHostFilters, and SecurityHeadersFilters are enabled by default.
  enabled += "play.filters.gzip.GzipFilter"

  ## CORS filter configuration
  # https://www.playframework.com/documentation/latest/CorsFilter
  # ~~~~~
  # CORS is a protocol that allows web applications to make requests from the browser
  # across different domains.
  # NOTE: You MUST apply the CORS configuration before the CSRF filter, as CSRF has
  # dependencies on CORS settings.
  cors {
    # Filter paths by a whitelist of path prefixes
    #pathPrefixes = ["/some/path", ...]

    # The allowed origins. If null, all origins are allowed.
    allowedOrigins = ["http://localhost:9000"]

    # The allowed HTTP methods. If null, all methods are allowed
    allowedHttpMethods = ["GET", "POST", "OPTIONS", "HEAD", "PUT"]
  }

  ## CSRF Filter
  # https://www.playframework.com/documentation/latest/ScalaCsrf#Applying-a-global-CSRF-filter
  # https://www.playframework.com/documentation/latest/JavaCsrf#Applying-a-global-CSRF-filter
  # ~~~~~
  # Play supports multiple methods for verifying that a request is not a CSRF request.
  # The primary mechanism is a CSRF token. This token gets placed either in the query string
  # or body of every form submitted, and also gets placed in the users session.
  # Play then verifies that both tokens are present and match.
  csrf {
    # Sets the cookie to be sent only over HTTPS
    #cookie.secure = true

    # Defaults to CSRFErrorHandler in the root package.
    #errorHandler = MyCSRFErrorHandler
  }

  ## Security headers filter configuration
  # https://www.playframework.com/documentation/latest/SecurityHeaders
  # ~~~~~
  # Defines security headers that prevent XSS attacks.
  # If enabled, then all options are set to the below configuration by default:
  headers {
    # The X-Frame-Options header. If null, the header is not set.
    #frameOptions = "DENY"

    # The X-XSS-Protection header. If null, the header is not set.
    #xssProtection = "1; mode=block"

    # The X-Content-Type-Options header. If null, the header is not set.
    #contentTypeOptions = "nosniff"

    # The X-Permitted-Cross-Domain-Policies header. If null, the header is not set.
    #permittedCrossDomainPolicies = "master-only"

    # The Content-Security-Policy header. If null, the header is not set.
    #contentSecurityPolicy = "default-src 'self'"
  }

  ## Allowed hosts filter configuration
  # https://www.playframework.com/documentation/latest/AllowedHostsFilter
  # ~~~~~
  # Play provides a filter that lets you configure which hosts can access your application.
  # This is useful to prevent cache poisoning attacks.
  hosts {
    # Allow requests to example.com, its subdomains, and localhost:9000.
    #allowed = [".example.com", "localhost:9000"]
  }

  gzip {
    contentType {
      # If non empty, then a response will only be compressed if its content type is in this list.
      whiteList = [ "text/*", "application/javascript", "application/json" ]

      # The black list is only used if the white list is empty.
      # Compress all responses except the ones whose content type is in this list.
      blackList = []
    }
  }

}

play.assets {
  path = "/public"
  urlPrefix = "/assets"
}

## Application
# ~~~~~
app.site.host="http://localhost:9000"
app.site.uris.activation="/email-verification/{activationHash}?email={email}"
app.site.uris.resetPassword="/auth/recover/{verificationCode}"
app.authToken.expiration.duration=365 # days
app.session.expiration.duration=3600 # seconds
app.reset-pasword.seed="xvzAq6MDZuuXFTbMV12hap25gh8xuW"

## Sendgrid
# ~~~~~
email.enabled=false
app.sendgrid.sendmail.url="https://api.sendgrid.com/api/mail.send.json"
app.sendgrid.apikey="[changeme]"
app.sendgrid.from="[changeme]"
app.sendgrid.fromname="Hackathon Starter"
app.sendgrid.appName="Hackathon Starter"
